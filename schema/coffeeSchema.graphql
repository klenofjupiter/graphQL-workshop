#type is an object, a scalar is a single value 
type Human {
	id: ID!
	name: String!
	contactDetails: ContactDossier
	isBarista: Boolean #see everyone is a customer mwahaha
	baristaDetails: Barista
	customerDetails: Customer
}
type Barista {
	id: ID!
	dateHired: String!
	dateLeft: String
	transactionList: [Transaction!]!
	rating: BaristaRating
	Human: Human
}
enum BaristaRating {
	AMAZING
	WONDERFUL
	ASTOUNDING
	DELIGHTFUL
}
type Customer {
	id: ID!
	transactionList: [Transaction!]!
	favorites: [Product!]!
}
type Product {
	id: ID!
	name: String!
	description: String 
	madeOnSite: Boolean!
	recipe: Recipe
	price: Float!
}
type Recipe {
	id: ID!
	description: String
	ingredientList: [Product!]!
	instructions: String

}
type Transaction {
	id:ID!
	customer: Customer
	barista: Barista
	order: [Product!]!
	dateTime: String!
	totalPrice: Float

}
type ContactDossier {
	id: ID!
	email: String
	phone: String 
	address: String 
	carrierPigeonName: String
}
# we wouldnt really want the commented out ones because we'd just filter off the huaman
type Query {
	allProducts: [Product!]!
	# allCustomers: [Customer!]!
	# allBaristas: [Barista!]!
	allHumans: [Human!]!
	Product(id:ID!): Product
	# Customer(id:ID!): Customer
	# Barista(id:ID!): Barista
	Human(id:ID!): Human
}
input BaristaLeftMutation {
	id: ID!
	dateLeft:String 
}
input WholePerson 
type Mutation {
	baristaLeaving(input: BaristaLeftMutation): WholePerson!
	hireBarista()
}



